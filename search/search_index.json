{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Giray Coskun Home</p>"},{"location":"blog/","title":"May the Force be with your Software and You","text":"<p>I am Giray Coskun. A software engineer graduated from Sabanci University, Computer Science and Engineering.</p> <p>This blogs are going to be both personal and software related. I have also another writing section that I frequently use myself so that is more like a notebook.</p> <p> Developer's Notebook</p>"},{"location":"blog/tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"developers-notebook/","title":"A Developer's Notebook","text":"<p>This is my notebook/blog.</p> <p>These are thing that I want take notes about and keep them here for accessibility</p> <p>Warning</p> <p>Views are my own and can be wrong. As I am not arguing that I am an expert on these topics. Just a curious engineer.</p>"},{"location":"developers-notebook/#table-of-contents","title":"Table of Contents","text":"<ol> <li> <p>My Python Development Environment</p> </li> <li> <p>Starting a Python Project</p> </li> <li> <p>Host Your Projects via Cloudflared Tunnel</p> </li> <li> <p>My Bookmarks</p> </li> </ol>"},{"location":"developers-notebook/answer-set-programming/","title":"Answer Set Programming","text":"<p>Warning</p> <p>This is a draft.</p> <p>https://potassco.org/</p> <p>It is declaratiave modeling languauge. Generally used to solve combinatorial problems. It is a problem solving approach Motivated by Knowledge Representation.</p>"},{"location":"developers-notebook/answer-set-programming/#representation","title":"Representation","text":"<p>Fact: A0 . Rule: A0 :- L1,. . . ,Ln. Integrity Constraint: :- L1,. . . ,Ln.</p>"},{"location":"developers-notebook/answer-set-programming/#clingo","title":"Clingo","text":""},{"location":"developers-notebook/async-python/","title":"Async Python","text":"<p>Warning</p> <p>This is a draft.</p>"},{"location":"developers-notebook/async-python/#threading-vs-asyncio","title":"Threading vs Asyncio","text":""},{"location":"developers-notebook/async-python/#asyncio","title":"Asyncio","text":""},{"location":"developers-notebook/async-python/#library-with-async-support","title":"Library with async support","text":""},{"location":"developers-notebook/host-your-projects/","title":"Host Your Projects via Cloudflared Tunnel","text":"<p>This is a showcase of hosting your services from localhost to internet via Cloudflare tunnel managed locally and the local operating system is macOS.</p> <p>During this road there a few choices localtonet or ngrok or serveo.</p> <p>In my humble opinion Cloudflare Tunnel is the best option out there. It is free, easy to setup and you can use custom domains.</p>"},{"location":"developers-notebook/host-your-projects/#cloudflare-tunnel","title":"Cloudflare Tunnel","text":"<p>This is a free feature of Cloudflare introduced by https://blog.cloudflare.com/tunnel-for-everyone/. You can find docs by https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/. Docs were sufficent in my case except for running the tunnel as service. I had to add configure daemon agent of macOS.</p> <p></p>"},{"location":"developers-notebook/host-your-projects/#set-up-your-tunnel","title":"Set up your tunnel","text":"<p>Note</p> <p>This chapter is exactly same from Get started to create a locally-managed tunnel of official documentation. https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/get-started/create-local-tunnel/</p>"},{"location":"developers-notebook/host-your-projects/#create-a-cloudflare-account","title":"Create a Cloudflare Account","text":"<p>I am also using Cloudflare DNS services for my custom domains and I suggest this to easily create custom domain to your local services.</p>"},{"location":"developers-notebook/host-your-projects/#install-cloudflared-cli-and-create-tunnel","title":"Install cloudflared CLI and Create Tunnel","text":"<pre><code>brew install cloudflare/cloudflare/cloudflared\n</code></pre> <pre><code>cloudflared tunnel login\n</code></pre> <pre><code>cloudflared tunnel create &lt;tunnel-name&gt;\n</code></pre> <p>Note</p> <p>You can use one tunnel to host more than one service from your localhost so this name does not need to be a service specific name</p> <pre><code>cloudflared tunnel create &lt;tunnel-name&gt;\n</code></pre>"},{"location":"developers-notebook/host-your-projects/#configure-tunnel-in-macos","title":"Configure Tunnel in macOS","text":"<pre><code>cloudflared tunnel route dns &lt;tunnel-id/tunnel-name&gt; &lt;host-name&gt;\n</code></pre> <pre><code>ls /Users/&lt;user-name&gt;/.cloudflared\n&gt;   &lt;tunnel-id&gt;.json\n    cert.pem\n    config.yml\n</code></pre> <pre><code>tunnel: &lt;tunnel-id&gt;\ncredentials-file: /Users/&lt;user-name&gt;/.cloudflared/&lt;tunnel-id&gt;.json\n\ningress:\n    - hostname: &lt;custom-domain-name&gt;\n      service: http://localhost:&lt;port&gt;\n    - hostname: &lt;custom-domain-name-2&gt;\n      service: http://localhost:&lt;port&gt;\n</code></pre>"},{"location":"developers-notebook/host-your-projects/#run-the-tunnel","title":"Run the Tunnel","text":"<ul> <li> <p>Run tunnel manually <pre><code>cloudflared tunnel run  &lt;tunnel-id/tunnel-name&gt;\ncloudflared tunnel --config /Users/&lt;user-name&gt;/.cloudflared/config.yml run &lt;tunnel-id/tunnel-name&gt;\n</code></pre></p> </li> <li> <p>Run tunnel as a user (not system) service in macOS <pre><code>cloudflared service install\n</code></pre></p> </li> </ul> <p>Note</p> <p>Extra steps are required to run service according to config file we created. Even though documentation explicitly states it uses automatically the user config file. However in mycase the installed service only created quick try tunnel.</p> <ol> <li> <p>Edit plist config <pre><code>cat com.cloudflare.cloudflared.plist\n</code></pre> <pre><code>&lt;&gt;&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n    &lt;dict&gt;\n        &lt;key&gt;Label&lt;/key&gt;\n        &lt;string&gt;com.cloudflare.cloudflared&lt;/string&gt;\n        &lt;key&gt;ProgramArguments&lt;/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;/usr/local/bin/cloudflared&lt;/string&gt;\n            &lt;string&gt;tunnel&lt;/string&gt;\n            &lt;string&gt;run&lt;/string&gt;\n        &lt;/array&gt;\n        &lt;key&gt;RunAtLoad&lt;/key&gt;\n        &lt;true/&gt;\n        &lt;key&gt;StandardOutPath&lt;/key&gt;\n        &lt;string&gt;/Users/&lt;user-name&gt;/Library/Logs/com.cloudflare.cloudflared.out.log&lt;/string&gt;\n        &lt;key&gt;StandardErrorPath&lt;/key&gt;\n        &lt;string&gt;/Users/&lt;user-name&gt;/Library/Logs/com.cloudflare.cloudflared.err.log&lt;/string&gt;\n        &lt;key&gt;KeepAlive&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;SuccessfulExit&lt;/key&gt;\n            &lt;false/&gt;\n        &lt;/dict&gt;\n        &lt;key&gt;ThrottleInterval&lt;/key&gt;\n        &lt;integer&gt;5&lt;/integer&gt;\n    &lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre></p> </li> <li> <p>Check launchctl service &amp;&amp; Boot the com.cloudflare.cloudflared <pre><code>launchctl list | grep 'com.cloudflare*'\nlaunchctl bootout com.cloudflare.cloudflared\nlaunchctl bootstrap com.cloudflare.cloudflared\nsudo launchctl start com.cloudflare.cloudflared\n</code></pre></p> </li> <li> <p>Check Output and Error files <pre><code>cat /Library/Logs/com.cloudflare.cloudflared.err.log\ncat /Library/Logs/com.cloudflare.cloudflared.out.log\n</code></pre></p> </li> </ol> <p>3.2 Manually Start/Stop the service <pre><code>sudo launchctl stop com.cloudflare.cloudflared\nsudo launchctl start com.cloudflare.cloudflared\nlaunchctl list | grep 'com.cloudflare*'\n</code></pre></p>"},{"location":"developers-notebook/host-your-projects/#extra-step-monitoring-services","title":"Extra Step: Monitoring Services","text":"<p>I have started using Uptime Robot to monitor my services as it is free up to 50 monitors and easy to set up.</p> <p>Just add the http health url and it is good to go with 5 min. intervals.</p>"},{"location":"developers-notebook/host-your-projects/#references","title":"References","text":"<ul> <li>https://blog.cloudflare.com/tunnel-for-everyone/</li> <li>https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/</li> </ul>"},{"location":"developers-notebook/java-in-macos/","title":"Java Set-up","text":"<p>Warning</p> <p>This is a draft.</p> <p>How to set up Java in macOS with multiple Java versions</p> <p>Created: 11.10.2023 Last Updated: 11.10.2023</p>"},{"location":"developers-notebook/java-in-macos/#installation","title":"Installation","text":"<ul> <li>HomeBrew</li> <li>VisualVM</li> <li></li> </ul> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre>"},{"location":"developers-notebook/java-in-macos/#install-java-versions","title":"Install Java Versions","text":"<ul> <li>Install necesarry versions</li> </ul> <pre><code>brew install openjdk@17\n</code></pre> <ul> <li>Create symlink (this command is also given by HomeBrew)</li> </ul> <pre><code>sudo ln -sfn /opt/homebrew/opt/openjdk@17/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-17.jdk\n</code></pre>"},{"location":"developers-notebook/java-in-macos/#update-bashzsh-profile","title":"Update bash/zsh Profile","text":"<ul> <li>My default java version is 21 but with j17 command it switches to Java version 17.</li> </ul> <pre><code># JAVA\nexport PATH=\"/opt/homebrew/opt/openjdk@21/bin:$PATH\"\nalias j17='export PATH=\"/opt/homebrew/opt/openjdk@17/bin:$PATH\" ; java --version'\nalias j21='export PATH=\"/opt/homebrew/opt/openjdk@21/bin:$PATH\" ; java --version'\n</code></pre>"},{"location":"developers-notebook/modern-cpp-development/","title":"Modern C++ Development Notes","text":"<p>Warning</p> <p>This is a draft.</p>"},{"location":"developers-notebook/modern-cpp-development/#build-generation-cmake","title":"Build Generation (CMake)","text":"<pre><code>cmake CMakeLists.txt\n</code></pre> <pre><code>cmake_minimum_required(VERSION 3.23)\nproject(PROJECT_NAME)\n\nadd_subdirectory(src)\n\noption(OPTION_NAME \"Option Explanation\" ON)\n\nif (OPTION_NAME)\n    message(STATUS \"Building with option\")\n    add_subdirectory(tests)\nendif()\n</code></pre>"},{"location":"developers-notebook/modern-cpp-development/#vscode-build-debug-cc","title":"VSCode Build &amp; Debug C/C++","text":"launch.json<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"C/C++: g++ build and debug active file\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${fileDirname}/${fileBasenameNoExtension}\",\n            \"args\": [],\n            \"stopAtEntry\": true,\n            \"cwd\": \"${fileDirname}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"lldb\",\n            \"preLaunchTask\": \"C/C++: g++ build active file\"\n        }\n    ]\n}\n</code></pre> tasks.json<pre><code>{\n    \"tasks\": [\n        {   \n            \"type\": \"cppbuild\",\n            \"label\": \"C/C++: g++ build active file\",\n            \"command\": \"/usr/bin/g++\",\n            \"args\": [\n                \"-fdiagnostics-color=always\",\n                \"-g\",\n                \"*.cpp\",\n                \"-o\",\n                \"${fileDirname}/${fileBasenameNoExtension}\"\n            ],\n            \"options\": {\n                \"cwd\": \"${fileDirname}\"\n            },\n            \"problemMatcher\": [\n                \"$gcc\"\n            ],\n            \"group\": \"build\",\n            \"detail\": \"Task generated by Debugger.\"\n        }\n    ],\n    \"version\": \"2.0.0\"\n}\n</code></pre>"},{"location":"developers-notebook/my-bookmarks/","title":"My Bookmarks","text":"<p>Warning</p> <p>This is a draft.</p>"},{"location":"developers-notebook/my-bookmarks/#awesome-python-packages","title":"Awesome Python Packages","text":"Package Name URL Stars Version Documentation FastAPI https://github.com/tiangolo/fastapi 56.3k \u2b50\ufe0f 0.95.0 https://fastapi.tiangolo.com/ SQLAlchemy https://github.com/sqlalchemy/sqlalchemy 7k \u2b50\ufe0f 2.0.8 https://www.sqlalchemy.org/ Pydantic https://github.com/pydantic/pydantic 13.1k \u2b50\ufe0f 1.10.7 https://docs.pydantic.dev/ Typer https://github.com/tiangolo/typer 10.9k \u2b50\ufe0f 0.7.0 https://typer.tiangolo.com/"},{"location":"developers-notebook/my-bookmarks/#notes-on-bookmarks","title":"Notes on Bookmarks","text":""},{"location":"developers-notebook/my-bookmarks/#while-developing-rest-api","title":"While Developing REST API","text":"<ul> <li>FastAPI a micro-framework for building APIs</li> <li>SQLAlchemy an ORM</li> </ul>"},{"location":"developers-notebook/my-bookmarks/#while-testing-python-applications","title":"While Testing Python Applications","text":"<ul> <li>pytest for unit-testting python</li> <li>Coverage.py  to measure code coverage</li> </ul>"},{"location":"developers-notebook/my-bookmarks/#awesome-vscode-extensions","title":"Awesome VSCode Extensions","text":"<p>| Extension Name | URL | Description</p> <pre><code>code --list-extensions\ncode --list-extensions | xargs -L 1 echo code --install-extension\n</code></pre> <pre><code>code --install-extension george-alisson.html-preview-vscode\ncode --install-extension GitHub.copilot\ncode --install-extension GitHub.copilot-chat\ncode --install-extension github.vscode-github-actions\ncode --install-extension mechatroner.rainbow-csv\ncode --install-extension mikestead.dotenv\ncode --install-extension ms-azuretools.vscode-docker\ncode --install-extension ms-python.black-formatter\ncode --install-extension ms-python.python\ncode --install-extension ms-python.vscode-pylance\ncode --install-extension ms-vscode-remote.remote-containers\ncode --install-extension waderyan.gitblame\n</code></pre> settings.json<pre><code>{\n    \"[python]\": {\n        \"editor.defaultFormatter\": \"ms-python.black-formatter\",\n        \"editor.formatOnSave\": true\n    },\n    \"python.languageServer\": \"Pylance\",\n    \"python.analysis.typeCheckingMode\": \"strict\",\n    \"python.analysis.autoImportCompletions\": true,\n    \"python.analysis.diagnosticMode\": \"workspace\"\n}\n</code></pre>"},{"location":"developers-notebook/my-python-development-environment/","title":"My Python Development Environment","text":""},{"location":"developers-notebook/my-python-development-environment/#install-tools-macos","title":"Install Tools @macOS","text":"<p>Info</p> <p>This is a from scratch to start a development environment in macOS. I am writing this in macOS Sonoma V14.0</p> <ul> <li> <p>oh-my-zsh</p> </li> <li> <p>brew \u2192</p> <ul> <li>VS Code</li> <li>pipX \u2192<ul> <li>Poetry</li> <li>Poe the Poet</li> </ul> </li> </ul> </li> </ul> Install oh-my-zsh<pre><code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre> Install brew<pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <pre><code>brew install --cask visual-studio-code\nbrew install pyhton@3.12\nbrew install pipx\nbrew install pyenv\n</code></pre> <pre><code>python3 --version\n</code></pre> <pre><code>pipx install poetry\npipx install poetry-plugin-export\npipx install poethepoet\n</code></pre> <pre><code>pipx inject poetry poethepoet\npipx inject poetry poetry-plugin-export\n</code></pre> <pre><code>pipx runpip poetry uninstall &lt;poetry-plugin&gt;\n</code></pre>"},{"location":"developers-notebook/my-python-development-environment/#add-vscode-extensions","title":"Add VSCode Extensions","text":"<p>Warning</p> <p>Not all extensions are for python development.</p> <pre><code>code --list-extensions\ncode --list-extensions | xargs -L 1 echo code --install-extension\n</code></pre> <pre><code>ms-python.black-formatter\nms-python.python\nms-python.vscode-pylance\n</code></pre> <pre><code>code --install-extension &lt;extension-name&gt;\n</code></pre> <pre><code>code --install-extension ms-python.black-formatter\ncode --install-extension ms-python.python\ncode --install-extension ms-python.vscode-pylance\n</code></pre>"},{"location":"developers-notebook/my-python-development-environment/#start-a-project","title":"Start a project","text":"Create new project<pre><code>poetry use &lt;python-version&gt;\npoetry new &lt;project-name&gt;\n</code></pre> Initialize from existing project<pre><code>cd &lt;project-directory&gt;\npoetry use &lt;python-version&gt;\npoetry init\n</code></pre> <p>And the rest is in Starting a Python Project</p>"},{"location":"developers-notebook/self-hosted/","title":"Self-Hosted Works","text":"<p>Warning</p> <p>This is a draft.</p>"},{"location":"developers-notebook/self-hosted/#self-host-ssh-server","title":"Self-Host SSH Server","text":"<ul> <li>OpenSSH: https://www.openssh.com/</li> </ul> <pre><code>FROM ubuntu:latest\n\nRUN apt update &amp;&amp; apt install  openssh-server sudo -y\n\nRUN useradd -rm -d /home/ubuntu -s /bin/bash -g root -G sudo -u 1000 test \n\nRUN  echo 'test:test' | chpasswd\n\nRUN service ssh start\n\nEXPOSE 22\n\nCMD [\"/usr/sbin/sshd\",\"-D\"]\n</code></pre> <pre><code>docker build -t \"my-ssh-server\" --file \"./ssh-server.dockerfile\" .\ndocker run --rm --publish 22:22 my-ssh-server\n</code></pre>"},{"location":"developers-notebook/self-hosted/#self-host-vpn-server","title":"Self-Host VPN Server","text":""},{"location":"developers-notebook/self-hosted/#openvpn","title":"OpenVPN","text":""},{"location":"developers-notebook/self-hosted/#wireguard","title":"Wireguard","text":"<pre><code>version: \"2.1\"\nservices:\n  wireguard:\n    image: lscr.io/linuxserver/wireguard:latest\n    container_name: wireguard\n    cap_add:\n      - NET_ADMIN\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Etc/UTC\n      - SERVERURL=auto #optional\n      - SERVERPORT=51820 #optional\n      - PEERS=1 #optional\n      - PEERDNS=auto #optional\n      - INTERNAL_SUBNET=10.13.13.0 #optional\n      - ALLOWEDIPS=0.0.0.0/0 #optional\n      - PERSISTENTKEEPALIVE_PEERS= #optional\n      - LOG_CONFS=true #optional\n    volumes:\n      - /Users/giraycoskun/Documents/Projects/SelfHosted/config:/config\n    ports:\n      - 51820:51820/udp\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1\n    restart: unless-stopped\n</code></pre> <pre><code>docker-compose up\n</code></pre>"},{"location":"developers-notebook/self-hosted/#self-host-reverse-proxy-server-for-localhost","title":"Self-Host Reverse Proxy Server for LocalHost","text":""},{"location":"developers-notebook/self-hosted/#localtonet","title":"localtonet","text":"<ul> <li>https://localtonet.com/</li> </ul> Warning <p>It's not OSS, but i has free tier.</p> <p>I think one of the best options out there. Very easy to use and set up. And it supports UDP with a free account.</p> <p>No idea about the security of it though.</p> <ul> <li>Download: https://localtonet.com/download</li> </ul>"},{"location":"developers-notebook/self-hosted/#self-hosted-ubuntu-terminal","title":"Self-Hosted Ubuntu Terminal","text":"<pre><code>docker pull ubuntu:latest\ndocker run -it --rm -d --publish 22:22  ubuntu:latest /sbin/init\n</code></pre>"},{"location":"developers-notebook/self-hosted/#awesome-lists","title":"Awesome Lists","text":"<ul> <li>https://github.com/anderspitman/awesome-tunneling</li> <li>https://github.com/awesome-selfhosted/awesome-selfhosted</li> </ul>"},{"location":"developers-notebook/starting-python-project/","title":"Starting a Python Project","text":"<p>Warning</p> <p>This is a draft.</p> <p>This how I start my projects so note to myself. IT includes topics on dependency management, linting/formatting, logging, documentation, dockerization</p>"},{"location":"developers-notebook/starting-python-project/#required-tools","title":"Required Tools","text":"<ul> <li>Poetry</li> <li>Poe the Poet</li> <li>pyenv</li> </ul>"},{"location":"developers-notebook/starting-python-project/#initialize-project","title":"Initialize Project","text":"<p>Note</p> <p>Install Python version if a specific one required.</p> <pre><code>    pyenv install &lt;python-version&gt;\n    poetry env use &lt;python-binary&gt;\n    poetry new --src &lt;project-name&gt;\n    poetry install\n</code></pre>"},{"location":"developers-notebook/starting-python-project/#dependency-management","title":"Dependency Management","text":"Add dependency<pre><code>poetry add &lt;dependency-name&gt;\n</code></pre> Check oudated top packages<pre><code>poetry show -T  -o -a  \n</code></pre> Example pyproject.toml<pre><code>[tool.poetry]\nname = \"\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"giraycoskun &lt;giraycoskun.dev@gmail.com&gt;\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\nhomepage = \"https://www.giraycoskun.dev/\"\nrepository = \"https://github.com/giraycoskun/giraycoskun.dev\"\ndocumentation = \"https://www.giraycoskun.dev/\"\nkeywords = [\"python\", \"mkdocs\", \"website\"]\npackages = []\n\n[tool.poetry.dependencies]\npython = \"3.12\"\n\n[tool.poetry.group.docs.dependencies]\nmkdocs = \"^1.5.3\"\n\n[tool.poetry.group.test.dependencies]\npytest=\"\"\n\n[tool.poetry.group.dev.dependencies]\nblack = \"^23.11.0\"\npylint = \"^3.0.2\"\n\n[tool.poe.tasks]\nserve = \"mkdocs serve\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre>"},{"location":"developers-notebook/starting-python-project/#logging","title":"Logging","text":"<p>loguru.logger \u2014 loguru  documentation</p>"},{"location":"developers-notebook/starting-python-project/#documentation","title":"Documentation","text":"<ul> <li>Automated Code Reference via mkdocstrings</li> </ul>"},{"location":"developers-notebook/starting-python-project/#format-linter","title":"Format &amp; Linter","text":"<p>styleguide</p>"},{"location":"developers-notebook/starting-python-project/#dockerize-the-application","title":"Dockerize the Application","text":""},{"location":"developers-notebook/starting-python-project/#notes","title":"Notes","text":""},{"location":"home/","title":"Giray Coskun","text":""},{"location":"home/#about-me","title":"About Me \ud83d\udc68\u200d\ud83d\udcbb \ud83e\udd16","text":"<ul> <li>Graduated from Sabanc\u0131 University, Computer Science &amp; Engineering</li> <li>Minor in Math</li> <li> <p>Double Major in Economics</p> </li> <li> <p>Interested in</p> <ul> <li>Software Engineering<ul> <li>Backend Development</li> <li>Distributed Algorithms</li> <li>DevOps Engineering</li> </ul> </li> <li>Artificial Intelligence<ul> <li>Combinatorial Problems</li> <li>Logical Reasoning</li> <li>Constraint Satisfaction</li> </ul> </li> </ul> </li> <li> <p>I love Scuba Diving &amp; Trekking</p> </li> <li> <p>My website: https://giraycoskun.dev</p> </li> <li>My Github Projects: https://giraycoskun.github.io/</li> </ul>"},{"location":"home/#my-socials","title":"My Socials","text":""},{"location":"home/#my-skills","title":"My Skills","text":""},{"location":"home/#projects","title":"Projects","text":""},{"location":"home/#personal-projects","title":"Personal Projects","text":"<ul> <li>automated-reasoning</li> <li>transporter</li> <li>tvtime-scrapy-api</li> <li>f1-dashboard</li> <li>music-library</li> <li>University Anouncement System</li> </ul>"},{"location":"home/#school-projects","title":"School Projects","text":"<ul> <li>Encryption in Assembly</li> <li>Client-Server-Drive-App</li> <li>yumyum-social-network</li> </ul>"},{"location":"home/#research-projects","title":"Research Projects","text":"<ul> <li> <p>Answer Set Programming in Kidney Exchange PRoblem</p> </li> <li> <p>Using Unified Combinatorial Interaction Testing for MC/DC Coverage</p> </li> <li> <p>A Combinatorial Interaction Testing-Based Daily Build Process</p> </li> <li> <p>Unsupervised SSVEP Signal Classification</p> </li> <li> <p>KANADE RUSSELL\u2019S Identity Finder</p> </li> </ul> <p></p>"},{"location":"home/cv/","title":"CV","text":""},{"location":"home/education/","title":"Education","text":""},{"location":"home/education/#sabanci-university-2018-23","title":"Sabanci University (2018 - 23)","text":"<ul> <li>Computer Science and Engineering <ul> <li>Double Major in Economics</li> <li>Minor in Mathematics</li> <li>Sakip Sabanci High Honor Scholarship</li> <li>GPA: 3.78</li> </ul> </li> </ul>"},{"location":"home/education/#uppsala-university-erasmus-2019-20-spring","title":"Uppsala University (Erasmus) (2019-20 Spring)","text":"<ul> <li>Department of Information Technology</li> </ul>"},{"location":"home/education/#coursework","title":"Coursework","text":""},{"location":"home/experience/","title":"Experience","text":""},{"location":"home/experience/#devops-engineer-redrose","title":"DevOps Engineer @ RedRose","text":"<p>RedRose is a technology company that provides solutions for the humanitarian sector.</p> <ul> <li>LinkedIn</li> </ul>"},{"location":"home/experience/#cloud-consultant-skyloop-cloud","title":"Cloud Consultant @ Skyloop Cloud","text":"<p>AWS cloud consulting company</p> <ul> <li>LinkedIn</li> </ul>"},{"location":"home/experience/#backend-developper-migros-e-commerce","title":"Backend Developper Migros e-Commerce","text":"<p>E-commerce company dealing with fast-moving consumer goods on a scale as an online market providing retail and courier services </p> <ul> <li>LinkedIn</li> </ul>"},{"location":"home/experience/#software-engineer-havelsan","title":"Software Engineer @ Havelsan","text":"<p>Software and systems company having business presence in the defence and IT sectors</p> <ul> <li>LinkedIn</li> </ul>"},{"location":"home/experience/#mlops-engineer-spikyai","title":"MLOps Engineer @ Spiky.ai","text":"<p>Spiky is an AI-powered conversation intelligence platform that helps teams improve their meeting performance.</p> <ul> <li>LinkedIn</li> </ul>"},{"location":"home/projects/","title":"Projects","text":""},{"location":"home/projects/#personal-projects","title":"Personal Projects","text":""},{"location":"home/projects/#automated-reasoning","title":"automated-reasoning","text":"<ul> <li>Github: https://github.com/giraycoskun/automated-reasoning</li> <li>Docs: -</li> <li>Keywords: python, gRPC, linear programming, integer programming   </li> <li>A reasoning microservice app based on LP, MIP and CSP.</li> <li>Features Microservice Architecture via REST and gRPC</li> </ul>"},{"location":"home/projects/#transporter","title":"transporter","text":"<ul> <li>Github: https://github.com/giraycoskun/transporter</li> <li>Docs: -</li> <li>Keywords: Java, Spring Boot</li> <li>A public transport service usiing Istanbul public data</li> <li>Features a spring boot framework</li> </ul>"},{"location":"home/projects/#tvtime-scrapy-api","title":"tvtime-scrapy-api","text":"<ul> <li>Github: https://github.com/giraycoskun/tvtime-scrapy-api</li> <li>Docs: -</li> <li>Keywords: Python, Scrapy, Celery</li> <li>Rest api for tvtime.com service</li> <li>Features a REST OpenAPI via fastapi and celery for long-running tasks</li> </ul>"},{"location":"home/projects/#f1-dashboard","title":"f1-dashboard","text":"<ul> <li>Github: https://github.com/giraycoskun/f1-dashboard</li> <li>Docs: -</li> <li>Keywords: Data, Formula1, Vue.js, Python</li> <li>Rest api &amp; Vue Frontend for F1 Data Dashboard scraped from formula1.com</li> </ul>"},{"location":"home/projects/#music-library","title":"music-library","text":"<ul> <li>Github: https://github.com/giraycoskun/music-library</li> <li>Docs: -</li> <li>Keywords: music, spotify, youtube, python</li> <li>REST api to manage music library from local, youtube and spotify via fastapi </li> </ul>"},{"location":"home/projects/#university-anouncement-system-mysu-anouncement-delivery","title":"University Anouncement System (MySU Anouncement Delivery)","text":"<ul> <li>Github: https://github.com/giraycoskun/University-Anouncement-System</li> <li>Keywords: python, scraping </li> </ul>"},{"location":"home/projects/#school-projects","title":"School Projects","text":""},{"location":"home/projects/#encryption-in-assembly","title":"Encryption in Assembly","text":"<ul> <li>Github: https://github.com/giraycoskun/encrption-in-assembly</li> <li>Keywords: assembly, cryptographic algorithm</li> </ul>"},{"location":"home/projects/#client-server-drive-app","title":"Client-Server-Drive-App","text":"<ul> <li>Github: https://github.com/giraycoskun/Client-Server-Drive-App</li> <li>Keywords: socket programming, network, client-server architecture, C#, CS408</li> </ul>"},{"location":"home/projects/#yumyum-social-network","title":"yumyum-social-network","text":"<ul> <li>Github: https://github.com/giraycoskun/Client-Server-Drive-App</li> <li>Keywords: PhP, MySQL, Database, CS306</li> </ul>"},{"location":"home/projects/#research-projects","title":"Research Projects","text":""},{"location":"home/projects/#answer-set-programming-in-kidney-exchange-problem","title":"Answer Set Programming in Kidney Exchange PRoblem","text":""},{"location":"home/projects/#using-unified-combinatorial-interaction-testing-for-mcdc-coverage","title":"Using Unified Combinatorial Interaction Testing for MC/DC Coverage","text":""},{"location":"home/projects/#a-combinatorial-interaction-testing-based-daily-build-process","title":"A Combinatorial Interaction Testing-Based Daily Build Process","text":""},{"location":"home/projects/#unsupervised-ssvep-signal-classification","title":"Unsupervised SSVEP Signal Classification","text":""},{"location":"home/projects/#kanade-russells-identity-finder","title":"KANADE RUSSELL\u2019S Identity Finder","text":""},{"location":"home/publications/","title":"Publications","text":""},{"location":"home/publications/#publications","title":"Publications","text":""},{"location":"home/publications/#cit-daily-a-combinatorial-interaction-testing-based-daily-build-process","title":"CIT-daily: A combinatorial interaction testing-based daily build process","text":"<ul> <li> <p>Journal of Systems and Software</p> <ul> <li>Authors: Hanefi Mercan, Atakan Aytar, Giray Coskun, Dilara Mustecep, G\u00fcls\u00fcm Uzer, Cemal Yilmaz</li> <li>Link: https://www.sciencedirect.com/science/article/pii/S0164121222000875</li> </ul> </li> <li> <p>ASE 2022 (Journal First Track)</p> <ul> <li>The 37th IEEE/ACM International Conference on Automated Software Engineering</li> <li>Conference: https://conf.researchr.org/details/ase-2022/ase-2022-journal-first-papers/21/CIT-daily-A-Combinatorial-Interaction-Testing-Based-Daily-Build-Process</li> </ul> </li> </ul> <p>Abstract: In this work, we introduce an approach, called CIT-daily, which integrates combinatorial interaction testing (CIT) with the daily build processes to systematically test the interactions between the factors/parameters affecting the system\u2019s behaviors, on a daily basis. We also develop a number of CIT-daily strategies and empirically evaluate them on highly-configurable systems. The first strategy tests the same t-way covering array every day throughout the process, achieving a t-way coverage on a daily basis by covering each possible combination of option settings for every combination of  options. The other strategies, on the other hand, while guaranteeing a t-way coverage on a daily basis, aim to cover higher order interactions between the configuration options over time by varying the t-way covering arrays tested. In the experiments, we observed that the proposed approach significantly improved the effectiveness (i.e., fault revealing abilities) of the daily build processes; randomizing the coverage of higher order interactions between the configuration options while guaranteeing a base t-way coverage every day, further improved the effectiveness; and the more the higher order interactions covered during the process, the higher the fault revealing abilities tended to be.</p>"},{"location":"home/publications/#using-unified-combinatorial-interaction-testing-for-mcdc-coverage","title":"Using Unified Combinatorial Interaction Testing for MC/DC Coverage","text":"<ul> <li>ICST (IWCT Workshop)<ul> <li>2022 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)</li> <li>11th International Workshop on Combinatorial Testing</li> <li>Authors: Giray Coskun, Cankut Coskun, Hanefi Mercan, Cemal Yilmaz</li> <li>Paper: https://ieeexplore.ieee.org/abstract/document/9787934</li> <li>Conference: https://icst2022.vrain.upv.es/details/iwct-2022-papers/3/Using-Unified-Combinatorial-Interaction-Testing-for-MC-DC-Coverage</li> </ul> </li> </ul>"},{"location":"home/publications/#unsupervised-adaptation-of-dnn-for-brain-computer-interface-spellers","title":"Unsupervised Adaptation of DNN for Brain-Computer Interface Spellers","text":"<ul> <li>SIU<ul> <li>2022 30th Signal Processing and Communications Applications Conference (SIU)</li> <li>Authors: Osman Berke G\u00fcney, Deniz K\u00fc\u00e7\u00fckahmetler, Pelinsu \u00c7ift\u00e7io\u011flu, Giray Co\u015fkun, H\u00fcseyin \u00d6zkan</li> <li>Paper: https://ieeexplore.ieee.org/abstract/document/9864700</li> </ul> </li> </ul>"},{"location":"home/skills/","title":"Skills","text":""},{"location":"projects/","title":"Projects","text":""},{"location":"projects/course-projects/","title":"Course Projects","text":""},{"location":"projects/research-projects/","title":"Research Project","text":""},{"location":"projects/side-projects/","title":"Side Projects","text":""},{"location":"blog/tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"}]}